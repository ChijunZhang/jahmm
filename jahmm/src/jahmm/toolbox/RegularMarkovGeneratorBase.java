/*
 * Copyright (c) 2004-2009, Jean-Marc Fran√ßois. All Rights Reserved.
 * Licensed under the New BSD license.  See the LICENSE file.
 */
package jahmm.toolbox;

import jahmm.RegularHmm;
import jahmm.observables.Observation;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

/**
 * Generates sequences of Markovian observations given a HMM.
 *
 * @param <TObs> The type of observations regarding the Hidden Markov Model.
 */
public class RegularMarkovGeneratorBase<TObs extends Observation> extends MarkovGeneratorBase<TObs, TObs, RegularHmm<TObs>> implements RegularMarkovGenerator<TObs> {

    private static final Logger LOG = Logger.getLogger(RegularMarkovGeneratorBase.class.getName());

    /**
     * Initializes a Markovian generator.
     *
     * @param hmm An Hidden Markov Model that perfectly models the sequences
     * generated by this object.
     */
    public RegularMarkovGeneratorBase(RegularHmm<TObs> hmm) {
        super(hmm);
    }

    /**
     * Generates a new (pseudo) random observation.
     *
     * @return The generated observation.
     */
    @Override
    public TObs observation() {
        TObs o = hmm.getOpdf(stateNb).generate();
        double rand = Math.random();

        for (int j = 0; j < hmm.nbStates() - 1; j++) {
            if ((rand -= hmm.getAij(stateNb, j)) < 0) {
                stateNb = j;
                return o;
            }
        }

        stateNb = hmm.nbStates() - 1;
        return o;
    }

    /**
     * Generates a new (pseudo) random observation sequence and start a new one.
     *
     * @param length The length of the sequence.
     * @return An observation sequence.
     */
    @Override
    public List<TObs> observationSequence(int length) {
        if (length <= 0) {
            throw new IllegalArgumentException("Positive length required");
        }

        ArrayList<TObs> sequence = new ArrayList<>();
        while (length-- > 0) {
            sequence.add(observation());
        }
        newSequence();

        return sequence;
    }

    @Override
    public TObs interaction() {
        return this.observation();
    }

    @Override
    public List<TObs> interactionSequence(int length) {
        return this.observationSequence(length);
    }
}
